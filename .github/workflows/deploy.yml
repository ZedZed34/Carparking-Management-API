name: Deploy to Railway (Docker + Django)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Verify Railway auth & context
        run: |
          railway whoami
          railway status || true
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy to Railway (Dockerfile)
        run: |
          railway up --detach \
            --project ${{ secrets.RAILWAY_PROJECT_ID }} \
            --service ${{ secrets.RAILWAY_SERVICE_ID }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run migrations
        run: |
          railway run \
            --project ${{ secrets.RAILWAY_PROJECT_ID }} \
            --service ${{ secrets.RAILWAY_SERVICE_ID }} \
            python manage.py migrate --noinput
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Collect static
        run: |
          railway run \
            --project ${{ secrets.RAILWAY_PROJECT_ID }} \
            --service ${{ secrets.RAILWAY_SERVICE_ID }} \
            python manage.py collectstatic --noinput
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Smoke test /healthz (public URL)
        run: |
          railway run \
            --project ${{ secrets.RAILWAY_PROJECT_ID }} \
            --service ${{ secrets.RAILWAY_SERVICE_ID }} \
            python - <<'PY'
import os, urllib.request, time
domain = os.getenv("RAILWAY_PUBLIC_DOMAIN", "").strip()
if not domain:
    raise SystemExit("No RAILWAY_PUBLIC_DOMAIN available")
url = f"https://{domain}/healthz/"
for i in range(10):
    try:
        with urllib.request.urlopen(url, timeout=5) as r:
            assert r.status == 200, f"healthz not OK: {r.status}"
            print("healthz OK at", url)
            break
    except Exception as e:
        print("Attempt", i+1, "failed:", e)
        time.sleep(3)
else:
    raise SystemExit("healthz check failed after retries")
PY
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      # Optional: auto-create a superuser if secrets are set
      - name: Create superuser (optional)
        if: ${{ secrets.DJANGO_SUPERUSER_USERNAME != '' && secrets.DJANGO_SUPERUSER_PASSWORD != '' }}
        run: |
          railway run \
            --project ${{ secrets.RAILWAY_PROJECT_ID }} \
            --service ${{ secrets.RAILWAY_SERVICE_ID }} \
            python manage.py shell -c "
from django.contrib.auth import get_user_model
U = get_user_model()
u='${{ secrets.DJANGO_SUPERUSER_USERNAME }}'
e='${{ secrets.DJANGO_SUPERUSER_EMAIL }}'
p='${{ secrets.DJANGO_SUPERUSER_PASSWORD }}'
print('Ensuring superuser:', u)
if not U.objects.filter(username=u).exists():
    U.objects.create_superuser(username=u, email=e, password=p)
    print('Superuser created')
else:
    print('Superuser already exists')
"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
