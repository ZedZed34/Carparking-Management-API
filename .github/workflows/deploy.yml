name: Deploy to Railway

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm i -g @railway/cli

      - name: Verify Railway auth
        run: |
          railway whoami
          railway status || true
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy (Dockerfile) to Railway
        run: |
          railway up --ci --detach \
            --project ${{ secrets.RAILWAY_PROJECT_ID }} \
            --service ${{ secrets.RAILWAY_SERVICE_ID }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run migrations
        run: |
          railway run --project ${{ secrets.RAILWAY_PROJECT_ID }} --service ${{ secrets.RAILWAY_SERVICE_ID }} \
            python manage.py migrate --noinput
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Collect static
        run: |
          railway run --project ${{ secrets.RAILWAY_PROJECT_ID }} --service ${{ secrets.RAILWAY_SERVICE_ID }} \
            python manage.py collectstatic --noinput
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Smoke test /healthz (inside container)
        run: |
          railway run --project ${{ secrets.RAILWAY_PROJECT_ID }} --service ${{ secrets.RAILWAY_SERVICE_ID }} \
            python - <<'PY'
import os, urllib.request, time
url = f"http://127.0.0.1:{os.getenv('PORT','8000')}/healthz/"
for _ in range(10):
    try:
        with urllib.request.urlopen(url, timeout=3) as r:
            assert r.status == 200
            print("healthz OK"); break
    except Exception as e:
        print("waiting for app:", e); time.sleep(2)
else:
    raise SystemExit("healthz failed")
PY
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
